@inherits PlayerEditorComponentBase
@using EventHorizon.Game.Client.Systems.Combat.Model;
@using EventHorizon.Game.Client.Systems.Entity.Properties.Model.Api;
@using EventHorizon.Game.Client.Systems.Entity.Properties.Move.Api;
@using EventHorizon.Game.Editor.Client.PlayerEditor.Components.Property

<ContainerComponent State="State" Error="@ErrorMessage">
    <div class="player-editor__container">
        <FluentStack Class="player-editor__data-section" Orientation="Orientation.Vertical">
            <FluentButton Class="--compact"
             IconEnd="new Icons.Regular.Size16.ClipboardCheckmark()" OnClick="HandleSave"
                Disabled="!PendingSave">
                @if (PendingSave)
                {
                    @Localizer["Save"]
                }
                else
                {
                    @Localizer["No Pending Save"]
                }
            </FluentButton>
        </FluentStack>

        <div class="player-editor__container form-control" style="max-width: 300px">
            <label class="label">@Localizer["Force Set States"]</label>
            <div class="label__description">
                @Localizer["The selected types will always be set when a player logs onto the server."]
            </div>
            <Dropdown 
                TOption="PropertyType"
                Label="@Localizer["Force Set States"]"
                DeleteOptionTitle="@Localizer["Remove State"]"
                DropdownHeader="@Localizer["Select any states"]"
                OptionText="@(option => option.Label)"
                Options="@PlayerDataForceSet" SelectedOptions="@SelectedForceSetStates" SelectedOptionsChanged="HandleSelectedForceSetStatesChanged" />
        </div>
        @if (AvailableDataOptions.Count > 1)
        {
            <FluentStack Class="player-editor__data-section" Orientation="Orientation.Vertical">
                <div class="form-control">
                    <label class="label">@Localizer["Available State(s)"]</label>
                    <div class="label__description">
                        @Localizer["The available states that can be set on the player configuration. States can be used to set default settings."]
                    </div>
                    <StandardSelect Options="AvailableDataOptions" ValueChanged="HandleDataOptionChanged"
                        Value="SelectedDataOption" />
                </div>
            </FluentStack>
        }

        <FluentAccordion ExpandMode="AccordionExpandMode.Single">
            @foreach (var property in CustomizableProperties)
            {
                @switch (property.Key)
                {
                    case IModelState.NAME:
                        <FluentAccordionItem>
                            <HeadingTemplate>
                                <PlayerEditorHeadingComponent PropertyKey="@property.Key"
                                    Title="@Localizer["Remove Model State from Player Configuration."]"
                                    Label="@Localizer["Model State"]" Description="@Localizer["The Model State of the Player"]"
                                    ConfirmTitle="@Localizer["Confirm Delete Model State"]"
                                    ConfirmDescription="@Localizer["Are you sure you want to remove the Model State from the Player Configuration?"]"
                                    ConfirmButtonText="@Localizer["Delete Model State"]" OnDeleteProperty="HandleDeleteProperty" />
                            </HeadingTemplate>
                            <ChildContent>
                                <PlayerEditorModelStateComponent Data="property.Value" OnDataChange="HandlePropertyChange" />
                            </ChildContent>
                        </FluentAccordionItem>
                        break;
                    case IMovementState.NAME:
                        <FluentAccordionItem>
                            <HeadingTemplate>
                                <PlayerEditorHeadingComponent PropertyKey="@property.Key"
                                    Title="@Localizer["Remove Movement State from Player Configuration."]"
                                    Label="@Localizer["Movement State"]"
                                    Description="@Localizer["The Movement State of the Player"]"
                                    ConfirmTitle="@Localizer["Confirm Delete Movement State"]"
                                    ConfirmDescription="@Localizer["Are you sure you want to remove the Movement State from the Player Configuration?"]"
                                    ConfirmButtonText="@Localizer["Delete Movement State"]"
                                    OnDeleteProperty="HandleDeleteProperty" />
                            </HeadingTemplate>
                            <ChildContent>
                                <PlayerEditorMovementStateComponent Data="property.Value" OnDataChange="HandlePropertyChange" />
                            </ChildContent>
                        </FluentAccordionItem>
                        break;
                    case ISkillState.NAME:
                        <FluentAccordionItem>
                            <HeadingTemplate>
                                <PlayerEditorHeadingComponent PropertyKey="@property.Key"
                                    Title="@Localizer["Remove Skill State from Player Configuration."]"
                                    Label="@Localizer["Skill State"]" Description="@Localizer["The Skill State of the Player"]"
                                    ConfirmTitle="@Localizer["Confirm Delete Skill State"]"
                                    ConfirmDescription="@Localizer["Are you sure you want to remove the Skill State from the Player Configuration?"]"
                                    ConfirmButtonText="@Localizer["Delete Skill State"]" OnDeleteProperty="HandleDeleteProperty" />
                            </HeadingTemplate>
                            <ChildContent>
                                <PlayerEditorSkillStateComponent Data="property.Value" OnDataChange="HandlePropertyChange" />
                            </ChildContent>
                        </FluentAccordionItem>
                        break;
                }
            }
        </FluentAccordion>
    </div>

</ContainerComponent>
