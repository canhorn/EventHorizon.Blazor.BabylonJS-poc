@using EventHorizon.Game.Editor.Client.Authentication.Api
@using EventHorizon.Game.Editor.Client.Authentication.Set
@using EventHorizon.Game.Editor.Client.DataStorage.Pages
@using EventHorizon.Game.Editor.Client.LiveEditor.Pages
@using EventHorizon.Game.Editor.Client.Shared.Components.TreeView.Model
@using EventHorizon.Game.Editor.Client.ArtifactManagement.Pages
@using EventHorizon.Game.Editor.Client.AssetManagement.Pages
@using EventHorizon.Game.Editor.Client.Wizard.Pages
@using EventHorizon.Game.Editor.Client.Zone.Pages

<TreeView Root="@QuickLinkData"
          OnChanged="HandleTreeViewChanged"
          data-test-selector="quick-links-tree-view" />

@code {
    [CascadingParameter]
    public SessionValues SessionValues { get; set; } = null!;

    [Inject]
    public MediatR.IMediator Mediator { get; set; } = null!;

    [Inject]
    public Localizer<SharedResource> Localizer { get; set; } = null!;

    public TreeViewNodeData QuickLinkData { get; set; } = new TreeViewNodeData();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        QuickLinkData = new TreeViewNodeData
            {
                Id = "quick-link-pages",
                Name = "pages",
                Text = Localizer["Quick Links"],
                IsExpanded = (SessionValues.Get("quickLinks_IsExpanded", string.Empty) == "true"),
                Children = new List<TreeViewNodeData>
            {
                new TreeViewNodeData
                {
                    Id = "quick-link__zone-entity",
                    Name = "zone-entity",
                    Text = Localizer["Entity Editor"],
                    Href = ZoneEntityListPage.Route,
                    IconCssClass = "--icon oi oi-list-rich"
                },
                new TreeViewNodeData
                {
                    Id = "quick-link__live-editor",
                    Name = "live-editor",
                    Text = Localizer["Live Editor"],
                    Href = LiveEditorPage.Route,
                    IconCssClass = "--icon oi oi-list-rich"
                },
                new TreeViewNodeData
                {
                    Id = "quick-link__zone-commands",
                    Name = "zone-commands",
                    Text = Localizer["Zone Commands"],
                    Href = ZoneCommandsPage.Route,
                    IconCssClass = "--icon oi oi-list-rich"
                },
                new TreeViewNodeData
                {
                    Id = "quick-link__wizard-editor",
                    Name = "wizard-editor",
                    Text = Localizer["Wizard"],
                    Href = WizardEditorPage.Route,
                    IconCssClass = "--icon oi oi-list-rich"
                },
                new TreeViewNodeData
                {
                    Id = "quick-link__data-storage",
                    Name = "data-storage",
                    Text = Localizer["Data Storage"],
                    Href = DataStoragePage.Route,
                    IconCssClass = "--icon oi oi-list-rich"
                },
                new TreeViewNodeData
                {
                    Id = "quick-link__asset-management",
                    Name = "asset-management",
                    Text = Localizer["Asset Management"],
                    Href = AssetManagementPage.Route,
                    IconCssClass = "--icon oi oi-list-rich"
                },
                new TreeViewNodeData
                {
                    Id = "quick-link__artifact-management",
                    Name = "artifact-management",
                    Text = Localizer["Artifact Management"],
                    Href = ArtifactManagementPage.Route,
                    IconCssClass = "--icon oi oi-list-rich"
                },
            }
            };
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        QuickLinkData.IsExpanded = (SessionValues.Get("quickLinks_IsExpanded", string.Empty) == "true");
    }

    private Task HandleTreeViewChanged()
    {
        return Mediator.Send(
            new SetSessionValueCommand(
                "quickLinks_IsExpanded",
                QuickLinkData.IsExpanded ? "true" : string.Empty
            )
        );
    }
}
