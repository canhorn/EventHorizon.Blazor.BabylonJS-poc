@using System.Text.Json 
@using EventHorizon.Game.Editor.Client.Zone.Api
@using BlazorMonaco
@using BlazorMonaco.Bridge 
@inherits PropertyControlBase

<div class="complex-property-control">
    @if (ShowRemove)
    {
        <label class="--font-bold --cursor-pointer"
               title="@Localizer["Remove"]">
            <button class="c-button --text"
                    @onclick="HandleRemove">
                &#10060
            </button>
            @PropertyName
        </label>
    }
    else
    {
        <label class="--font-bold">
            @PropertyName
        </label>
    }
    <div>
        <button @onclick="HandleOpenEditor">
            @Localizer["Open Editor"]
        </button>
        <details>
            <summary>
                @Localizer["Property Summary"]
            </summary>
            <div class="property-text">
                <DumpToJson Data="Property" />
            </div>
        </details>
    </div>
    <StandardModal IsOpen="IsEditorOpen" HideClose="true">
        <Body>
            <div class="property__editor-container">

                <MonacoEditor @ref="MonacoEditor"
                              Id="@PropertyEditorId"
                              CssClass="property__editor"
                              ConstructionOptions="BuildConstructionOptions" />
                <StandardToolbar class="property__editor-toolbar">
                    <StandardToolbarButton @onclick="HandleSave">
                        @Localizer["Save"]
                    </StandardToolbarButton>
                    <StandardToolbarButton @onclick="() => IsEditorOpen = false">
                        @Localizer["Cancel"]
                    </StandardToolbarButton>
                </StandardToolbar>
            </div>
        </Body>
    </StandardModal>
</div>


@code {
    [CascadingParameter]
    public ZoneState ZoneState { get; set; } = null!;

    public MonacoEditor MonacoEditor { get; set; } = null!;
    protected string PropertyEditorId => $"{PropertyName}-Editor";
    protected bool IsEditorOpen { get; set; }

    protected override object Parse(object value)
    {
        return JsonSerializer.Deserialize<Dictionary<string, object>>(
            value?.ToString() ?? "{}"
        ) ?? new Dictionary<string, object>();
    }

    public async Task HandleOpenEditor()
    {
        if (MonacoEditor.IsNotNull())
        {
            await MonacoEditor.SetValue(
                Property.ToString()
            );
        }
        IsEditorOpen = true;
    }

    public async Task HandleSave()
    {
        await HandleChange(
            new ChangeEventArgs
            {
                Value = await MonacoEditor.GetValue()
            }
        );
        IsEditorOpen = false;
    }


    public StandaloneEditorConstructionOptions BuildConstructionOptions(
        MonacoEditor _
    ) => new StandaloneEditorConstructionOptions
    {
        Theme = "vs-dark",
        Language = "json",
        Value = Property.ToString(),
        AutomaticLayout = true,
    };
}
