@using EventHorizon.Game.Client.Engine.Systems.Entity.Model
@using EventHorizon.Game.Editor.Zone.Editor.Services.Model
@inherits PropertyControlBase

<div class="vector">
    <label class="font-bold cursor-pointer"
           title="@Localizer["Remove"]">
        @if (ShowRemove)
        {
            <button class="c-button --text"
                    @onclick="HandleRemove">
                &#10060
            </button>
        }
        @PropertyName
    </label>
    <div class="vector__property-description">(@ParsedProperty.X, @ParsedProperty.Y, @ParsedProperty.Z)</div>
    <div class="vector__property-values">
        <div class="vector__property">
            <div class="vector__property__label">
                X
            </div>
            <div class="vector__property__value">
                <input class="c-text-input"
                       value="@ParsedProperty.X"
                       type="number"
                       step="0.01"
                       @onchange="HandleXChanged" />
            </div>
        </div>
        <div class="vector__property">
            <div class="vector__property__label">
                Y
            </div>
            <div class="vector__property__value">
                <input class="c-text-input"
                       value="@ParsedProperty.Y"
                       type="number"
                       step="0.01"
                       @onchange="HandleYChanged" />
            </div>
        </div>
        <div class="vector__property">
            <div class="vector__property__label">
                Z
            </div>
            <div class="vector__property__value">
                <input class="c-text-input"
                       value="@ParsedProperty.Z"
                       type="number"
                       step="0.01"
                       @onchange="HandleZChanged" />
            </div>
        </div>
    </div>
</div>

<style>
    .vector__property-values {
        display: grid;
        grid-gap: 0.3rem;
    }

    .vector__property-description {
        font-size: 0.8rem;
    }

    .vector__property {
        display: grid;
        grid-template-columns: 20% 80%;
        grid-template-areas: "label value";
    }

    .vector__property__label {
        grid-area: label;
    }

    .vector__value {
        grid-area: value;
    }
</style>


@code {
    private ServerVector3 ParsedProperty { get; set; }

    protected override void OnInitialized()
    {
        ParsedProperty = ZoneEditorPropertyType.ParseVector3(Property);
    }

    protected override void OnParametersSet()
    {
        ParsedProperty = ZoneEditorPropertyType.ParseVector3(Property);
    }

    protected async Task HandleXChanged(
        ChangeEventArgs args
    )
    {
        args.NullCheck();
        ParsedProperty.X = decimal.Parse(
            (string)args.Value
        );
        await TriggerChanged(
            ParsedProperty
        );
    }

    protected async Task HandleYChanged(
        ChangeEventArgs args
    )
    {
        args.NullCheck();
        ParsedProperty.Y = decimal.Parse(
            (string)args.Value
        );
        await TriggerChanged(
            ParsedProperty
        );
    }

    protected async Task HandleZChanged(
        ChangeEventArgs args
    )
    {
        args.NullCheck();
        ParsedProperty.Z = decimal.Parse(
            (string)args.Value
        );
        await TriggerChanged(
            ParsedProperty
        );
    }

    private async Task TriggerChanged(
        ServerVector3 property
    )
    {
        await OnChange.InvokeAsync(
            new PropertyChangedArgs
            {
                PropertyName = PropertyName,
                Property = property
            }
        );
    }

    protected override object Parse(
        object value
    )
    {
        return value;
    }
}
