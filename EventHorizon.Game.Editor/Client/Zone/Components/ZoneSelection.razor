@using MediatR;
@using EventHorizon.Game.Editor.Client.Zone.Get
@using EventHorizon.Game.Editor.Client.Zone.Api

<div>
    @ErrorMessage
</div>

@if (!AccessToken.IsFilled)
{
    <div>Please Login...</div>
}
else if (SelectedZone == null)
{
    @if (SelectionDisplay == "TILE")
    {
        <div>
            @foreach (var zone in Zones)
            {
                <div>
                    <div>Id: @zone.Id</div>
                    <div>Server Address: @zone.ServerAddress</div>
                    <div>Tag: @zone.Tag</div>
                    <div>Last Ping: @zone.LastPing.ToString("G")</div>
                    <button @onclick="() => HandleZoneSelectionChanged(zone.Id)">
                        Select
                    </button>
                </div>
            }
        </div>
    }
    else if (SelectionDisplay == "SELECT")
    {
        <EditForm Model="this">
            <label>
                Zone Select: (@SelectedZoneId)
                <InputSelect TValue="string"
                             ValueExpression="() => SelectedZoneId"
                             ValueChanged="HandleZoneSelectionChanged">
                    <option value="">Select a Zone...</option>
                    @foreach (var zone in Zones)
                    {
                        <option value="@zone.Id">@zone.Id</option>
                    }
                </InputSelect>

            </label>
        </EditForm>
    }
}
else
{
    if (ZoneState != null)
    {
        <div>
            SelectedZone: @SelectedZoneId
        </div>
    }
    else
    {
        <div>Loading...</div>
    }
}

@code {
    [CascadingParameter]
    public AccessTokenModel AccessToken { get; set; } = null!;
    [Parameter]
    public string SelectionDisplay { get; set; } = "TILE";

    [Inject]
    public IMediator Mediator { get; set; } = null!;

    public string SelectedZoneId { get; set; } = string.Empty;
    public CoreZoneDetails SelectedZone { get; set; }
    public ZoneState ZoneState { get; set; }

    public string ErrorMessage { get; set; }
    public bool IsConnected { get; set; }
    public IList<CoreZoneDetails> Zones = new List<CoreZoneDetails>();

    protected override async Task OnInitializedAsync()
    {
        await CheckState();
    }

    protected override async Task OnParametersSetAsync()
    {
        await CheckState();
    }

    private async Task HandleZoneSelectionChanged(
        string newValue
    )
    {
        if (SelectedZoneId == newValue
            || string.IsNullOrWhiteSpace(newValue))
        {
            return;
        }
        SelectedZoneId = newValue;
        SelectedZone = Zones.FirstOrDefault(
            a => a.Id == SelectedZoneId
        );
        var result = await Mediator.Send(
            new GetZoneStateCommand(
                SelectedZone
            )
        );
        if (!result.Success)
        {
            SelectedZoneId = string.Empty;
            ErrorMessage = result.ErrorCode;
            return;
        }
        ZoneState = result.Result;
        await Mediator.Send(
            new EventHorizon.Game.Editor.Client.Zone.Active.SetZoneAsActiveCommand(
                ZoneState
            )
        );
    }

    private async Task CheckState()
    {
        if (!AccessToken.IsFilled)
        {
            return;
        }
        var result = await Mediator.Send(
            new StartConnectionToCoreServerCommand(
                AccessToken.AccessToken
            )
        );
        if (!result.Success)
        {
            // TODO: Show Error Message
            return;
        }

        IsConnected = true;

        var zonesResult = await Mediator.Send(
            new QueryForAllZoneDetails()
        );
        if (zonesResult.Success)
        {
            Zones = new List<CoreZoneDetails>(
                zonesResult.Result
            );

            if (Zones.Count == 1)
            {
                // We will just select the first by default
                await HandleZoneSelectionChanged(
                    Zones.First().Id
                );
            }
        }
    }
}
