@using EventHorizon.Game.Editor.Properties.Api
@using EventHorizon.Game.Editor.Properties.Model
@using EventHorizon.Game.Editor.Client.Shared.Properties
@using EventHorizon.Game.Client.Engine.Systems.Entity.Model

<div class="form-input">
    <div class="form-input__name --font-bold --header-font-size">
        @Localizer[Step.Name]
    </div>
    <div class="form-input__description">
        <i class="fas fa-info-circle --info"></i> @Localizer[Step.Description]
    </div>

    <PropertyDisplay Data="_propertiesData"
                     LabelMap="PropertyLabelMap"
                     PropertiesMetadata="_propertiesMetadata"
                     OnChanged="HandleDataChanged" />


    <DumpToJson Data="Step" />
    <DumpToJson Data="Data" />
    <DumpToJson Data="_propertiesData" />
    <DumpToJson Data="_propertiesMetadata" />
</div>

@code {
    [CascadingParameter]
    public WizardState State { get; set; } = null!;

    [Parameter]
    public WizardStep Step { get; set; } = null!;
    [Parameter]
    public WizardData Data { get; set; } = null!;

    [Inject]
    public Localizer<SharedResource> Localizer { get; set; } = null!;

    public Dictionary<string, string> PropertyLabelMap { get; set; } = new Dictionary<string, string>();
    public Dictionary<string, object> _propertiesData = new();
    public PropertiesMetadataModel _propertiesMetadata = new PropertiesMetadataModel();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        var properties = Step.Details.Where(
            a => a.Key.StartsWith(
                "property:"
            ) && a.Key.EndsWith(
                ":label"
            ).IsNotTrue()
        );
        foreach (var property in properties)
        {
            var propertyKey = property.Key.Replace("property:", string.Empty);
            _propertiesMetadata[propertyKey] = property.Value;
            _propertiesData[propertyKey] = ParseDataValue(propertyKey, property.Value);
            PropertyLabelMap[propertyKey] = GetLabel(propertyKey);
            Data[property.Key] = property.Value;
        }
    }

    public string GetLabel(string key)
    {
        var label = Step.Details[$"property:{key}:label"];
        if (string.IsNullOrWhiteSpace(label).IsNotTrue())
        {
            return Localizer[label];
        }

        return label;
    }

    public object ParseDataValue(string key, string keyType)
    {
        switch (keyType)
        {
            case PropertyType.Boolean:
                return bool.TryParse(
                    Data[key], out var boolValue
                ) ? boolValue : GetDefaultProperty(keyType);
            case PropertyType.Decimal:
                return decimal.TryParse(
                    Data[key], out var decimalValue
                ) ? decimalValue : GetDefaultProperty(keyType);
            case PropertyType.Long:
                return long.TryParse(
                    Data[key], out var longValue
                ) ? longValue : GetDefaultProperty(keyType);
            case PropertyType.String:
                return Data[key];
            default:
                // TODO: Show Error Message
                return string.Empty;
        }
    }

    public object GetDefaultProperty(string propertyType)
    {
        return propertyType switch
        {
            PropertyType.Boolean => false,
            PropertyType.Decimal => 0.0m,
            PropertyType.Long => 0,
            PropertyType.Vector3 => ServerVector3.Zero(),
            _ => string.Empty,
        };
    }

    public Task HandleDataChanged(
        IDictionary<string, object> data
    )
    {
        _propertiesData = new Dictionary<string, object>(data);

        foreach (var property in _propertiesData)
        {
            Data[property.Key] = property.Value?.ToString() ?? string.Empty;
        }

        return Task.CompletedTask;
    }

    public class PropertiesMetadataModel
        : Dictionary<string, string>,
        PropertiesMetadata
    {
        public string GetPropertyType(
            string key,
            object _
        )
        {
            return this.TryGetValue(
                key,
                out var value
            ) ? value : PropertyType.String;
        }
    }
}
