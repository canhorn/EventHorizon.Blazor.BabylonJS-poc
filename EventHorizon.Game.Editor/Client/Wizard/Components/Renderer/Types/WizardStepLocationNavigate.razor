<div class="location-navigate">
    <div class="location-navigate__name --font-bold --header-font-size">
        @Localizer[Step.Name]
    </div>
    <div class="location-navigate__description">
        <i class="fas fa-info-circle --info"></i> @Localizer[Step.Description]
    </div>

    @if (!string.IsNullOrWhiteSpace(ErrorMessage))
    {
        <div class="location-navigate__error-message --error">
            <i class="fas fa-exclamation-triangle"></i> @ErrorMessage
        </div>
    }
</div>

@code {

    [CascadingParameter]
    public WizardState State { get; set; } = null!;

    [Parameter]
    public WizardStep Step { get; set; } = null!;
    [Parameter]
    public WizardData Data { get; set; } = null!;

    [Inject]
    public NavigationManager NavigationManager { get; set; } = null!;
    [Inject]
    public Localizer<SharedResource> Localizer { get; set; } = null!;

    public string ErrorMessage { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (Step.Details.TryGetValue(
            "Delay",
            out var delay
        ) && int.TryParse(
            delay,
            out var delayAsInt
        ))
        {
            await Task.Delay(delayAsInt);
        }

        if (!Step.Details.TryGetValue(
            "LocationProperty",
            out var locationProperty
        ))
        {
            ErrorMessage = Localizer["Location Property was not found."];
            return;
        }

        if (!Data.TryGetValue(
            locationProperty,
            out var location
        ))
        {
            ErrorMessage = Localizer["Location Property was not found."];
            return;
        }

        NavigationManager.NavigateTo(
            location
        );
    }
}
