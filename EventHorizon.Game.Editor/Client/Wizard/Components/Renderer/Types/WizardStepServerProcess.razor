@using EventHorizon.Game.Editor.Client.Wizard.Invalidate
@using EventHorizon.Game.Editor.Client.Wizard.Processing
@using EventHorizon.Game.Editor.Client.Wizard.Update 
@using EventHorizon.Zone.Systems.Wizard.Run

<div class="server-process">
    <div class="server-process__name --font-bold --header-font-size">
        @Localizer[Step.Name]
    </div>
    <div class="server-process__description">
        <i class="fas fa-info-circle --info"></i> @Localizer[Step.Description]
    </div>

    @if (Step.IsProcessing)
    {
        <div>
            <Loading Text="@Localizer["Processing..."]" />
        </div>
    }

    @if (!string.IsNullOrWhiteSpace(SuccessMesssage))
    {
        <div class="server-process__success-message --success">
            <i class="far fa-star"></i> @SuccessMesssage
        </div>
    }

    @if (!string.IsNullOrWhiteSpace(ErrorMessage))
    {
        <div class="server-process__error-message --error">
            <i class="fas fa-exclamation-triangle"></i> @ErrorMessage
        </div>
    }
</div>

@code {
    [CascadingParameter]
    public WizardState State { get; set; } = null!;

    [Parameter]
    public WizardStep Step { get; set; } = null!;
    [Parameter]
    public WizardData Data { get; set; } = null!;

    [Inject]
    public IMediator Mediator { get; set; } = null!;
    [Inject]
    public Localizer<SharedResource> Localizer { get; set; } = null!;

    public string SuccessMesssage { get; set; } = string.Empty;
    public string ErrorMessage { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (Data[$"Processor:{Step.Id}:Ran"] == "true")
        {
            SuccessMesssage = Localizer[
                "Successful Processed Request, please continue to next step."
            ];
            return;
        }

        await Mediator.Send(
            new SetProcessingOnWizardCommand(
                true
            )
        );

        var result = await Mediator.Send(
            new RunWizardScriptProcessorCommand(
                State.CurrentWizardId,
                Step.Id,
                Step.Details["Processor:ScriptId"],
                Data
            )
        );

        if (!result)
        {
            ErrorMessage = Localizer[result.ErrorCode];
            if (ErrorMessage == result.ErrorCode)
            {
                // since they match show a standard Error Code Message
                ErrorMessage = Localizer[
                    "Error Code: {0}",
                    result.ErrorCode
                ];
            }

            await Mediator.Send(
                new SetWizardToInvalidCommand(
                    result.ErrorCode
                )
            );
        }

        await Mediator.Send(
            new SetProcessingOnWizardCommand(
                false
            )
        );

        if (!Step.IsInvalid)
        {
            Data[$"Processor:{Step.Id}:Ran"] = "true";
            SuccessMesssage = Localizer[
                "Successful Processed Request, you can Cancel/Close the Wizard."
            ];

            if (Step.Details["DisablePrevious"] == "true")
            {
                Data[$"DisablePrevious:{Step.Id}"] = "true";
            }

            if (Step.HasNext)
            {
                SuccessMesssage = Localizer[
                    "Successful Processed Request, please continue to next step."
                ];
            }

            foreach (var property in result.Result)
            {
                Data[property.Key] = property.Value;
            }

            await Mediator.Send(
            new UpdateWizardDataCommand(
                Data
            )
        );
        }
    }
}
