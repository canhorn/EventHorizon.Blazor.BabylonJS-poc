<div class="capture-current-location">
    <div class="capture-current-location__name --font-bold --header-font-size">
        @Localizer[Step.Name]
    </div>
    <div class="capture-current-location__description">
        <i class="fas fa-info-circle --info"></i> @Localizer[Step.Description]
    </div>

    @if (!string.IsNullOrWhiteSpace(ErrorMessage))
    {
        <div class="capture-current-location__error-message --error">
            <i class="fas fa-exclamation-triangle"></i> @ErrorMessage
        </div>
    }

</div>

@code {
    [CascadingParameter]
    public WizardState State { get; set; } = null!;

    [Parameter]
    public WizardStep Step { get; set; } = null!;
    [Parameter]
    public WizardData Data { get; set; } = null!;

    [Inject]
    public NavigationManager NavigationManager { get; set; } = null!;
    [Inject]
    public Localizer<SharedResource> Localizer { get; set; } = null!;

    public string ErrorMessage { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (Step.Details.TryGetValue(
            "Delay",
            out var delay
        ) && int.TryParse(
            delay,
            out var delayAsInt
        ))
        {
            await Task.Delay(delayAsInt);
        }

        var currentLocation = NavigationManager.ToBaseRelativePath(
            NavigationManager.Uri
        );

        if (Step.Details.TryGetValue(
            "CurrentLocationProperty",
            out var property
        ))
        {
            Data[property] = currentLocation;

            await State.Next();
            return;
        }

        Data["CurrentLocation"] = currentLocation;

        await State.Next();
    }
}
