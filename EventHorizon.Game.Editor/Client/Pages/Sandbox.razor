@page "/sandbox"
@using Microsoft.Extensions.Logging
@using EventHorizon.Game.Editor.Client.Zone.Components
@using EventHorizon.Game.Editor.Client.Zone.Components.FileExplorer

<div>
    <h2>Activity Tracking</h2>

    <button type="button"
            @onclick="@HandleSendActivityEvent">
        Send Activity
    </button>
</div>

<div>
    <h2>Asset Management</h2>
    <button type="button"
            @onclick="@HandleGetFileManagementAssets">
        Get File Management Assets
    </button>
    <DumpToJson Data="FileManagementAssets" />
</div>

@code {
    [Inject]
    public MediatR.IMediator Mediator { get; set; } = null!;

    public EventHorizon.Game.Server.Asset.Model.FileManagementAssets FileManagementAssets { get; set; } = new Server.Asset.Model.FileManagementAssets();


    public async Task HandleGetFileManagementAssets()
    {
        var result = await Mediator.Send(
            new EventHorizon.Game.Server.Asset.Query.QueryForFileManagementAssets()
        );
        if (result)
        {
            FileManagementAssets = result.Result;
        }
    }

}


<ZoneStateProvider>
    <EditorFileExplorer />
    @*<ZoneStateSandbox />*@
</ZoneStateProvider>

<button type="button"
        @onclick="HandleOpenWindow">
    Open Window
</button>

<StandardWindow IsOpen="IsWindowOpen"
                IsDraggable="IsDraggable"
                WidthSize="@WidthSize"
                HeightSize="@HeightSize">
    <Header>Window</Header>
    <Body>
        <h2>Content</h2>
        <div>
            <button type="button"
                    @onclick="@(() => WidthSize = "small")">
                Width Small
            </button>
            <button type="button"
                    @onclick="@(() => WidthSize = "medium")">
                Width Medium
            </button>
            <button type="button"
                    @onclick="@(() => WidthSize = "large")">
                Width Large
            </button>
        </div>
        <div>
            <button type="button"
                    @onclick="@(() => HeightSize = "small")">
                Height Small
            </button>
            <button type="button"
                    @onclick="@(() => HeightSize = "medium")">
                Height Medium
            </button>
            <button type="button"
                    @onclick="@(() => HeightSize = "large")">
                Height Large
            </button>
        </div>
    </Body>
</StandardWindow>

<button type="button"
        @onclick="@(() => throw new Exception("Manual thrown error"))">
    Throw Error
</button>

@code {
    public bool IsWindowOpen;
    public bool IsDraggable = true;
    public string WidthSize = "small";
    public string HeightSize = "small";
    public string Width = "200px";
    public string Height = "200px";

    public void HandleOpenWindow()
    {
        IsWindowOpen = true;
    }
}

@foreach (var gridCell in TestingGird)
{
    <div style="        position: fixed;
        width: @(gridCell.CellWidth)px;
        height: @(gridCell.CellHeight)px;
        top: @(gridCell.Top)px;
        left: @(gridCell.Left)px;
        border: 5px solid white;
        pointer-events: none;
"></div>
}

<button type="button"
        @onclick="HandleCreateGrid">
    Create Grid
</button>

@code {
    public List<(int Left, int Top, int CellWidth, int CellHeight)> TestingGird { get; private set; } = new();

    private void HandleCreateGrid()
    {
        var InnerWidth = EventHorizon.Blazor.Interop.EventHorizonBlazorInterop.Get<int>("window", "innerWidth");
        var InnerHeight = EventHorizon.Blazor.Interop.EventHorizonBlazorInterop.Get<int>("window", "innerHeight");

        var cellWidth = InnerWidth / 3;
        var cellHeight = InnerHeight / 3;

        var cellTopLeft = (cellWidth * 0, cellHeight * 0, cellWidth, cellHeight);
        var cellTopCenter = (cellWidth * 1, cellHeight * 0, cellWidth, cellHeight);
        var cellTopRight = (cellWidth * 2, cellHeight * 0, cellWidth, cellHeight);

        var cellMiddleLeft = (cellWidth * 0, cellHeight * 1, cellWidth, cellHeight);
        var cellMiddleCenter = (cellWidth * 1, cellHeight * 1, cellWidth, cellHeight);
        var cellMiddleRight = (cellWidth * 2, cellHeight * 1, cellWidth, cellHeight);

        var cellBottomLeft = (cellWidth * 0, cellHeight * 2, cellWidth, cellHeight);
        var cellBottomCenter = (cellWidth * 1, cellHeight * 2, cellWidth, cellHeight);
        var cellBottomRight = (cellWidth * 2, cellHeight * 2, cellWidth, cellHeight);

        TestingGird = new List<(int Left, int Top, int CellWidth, int CellHeight)>() {
            cellTopLeft,
            cellTopCenter,
            cellTopRight,

            cellMiddleLeft,
            cellMiddleCenter,
            cellMiddleRight,

            cellBottomLeft,
            cellBottomCenter,
            cellBottomRight,
        };
    }
}


<button @onclick="HandleOpenModal">Open</button>

<StandardModal IsOpen="IsOpen" OnClose="HandleCloseModal">
    <Header>
        <h2>Header</h2>
    </Header>
    <Body>
        <div>
            Body!
        </div>
    </Body>
    <Footer>
        <div>
            <button type="button"
                    @onclick="HandleCloseModal">
                Cancel
            </button>
        </div>
    </Footer>
</StandardModal>


<div>
    <button type="button"
            @onclick="SendErrorMessage">
        Send Error Log Message
    </button>
</div>
<div>
    <button type="button"
            @onclick="SendInfoMessage">
        Send Info Log Message
    </button>
</div>
<div>
    <button type="button"
            @onclick="SendArgsMessage">
        Send Info w/Args Log Message
    </button>
</div>

@code {
    public bool IsOpen { get; set; }

    public void HandleOpenModal()
    {
        IsOpen = true;
    }

    public void HandleCloseModal()
    {
        IsOpen = false;
    }

    [Inject]
    public ILogger<Index> Logger { get; set; } = null!;

    public void SendErrorMessage()
    {
        try
        {
            throw new Exception("hello I am an Error Message");
        }
        catch (Exception ex)
        {
            Logger.LogError(
                ex,
                "Error Message 123-123-123-123"
            );
        }
    }

    public void SendInfoMessage()
    {
        Logger.LogInformation(
            "Standard Message 123-123-123-123"
        );
    }
    public void SendArgsMessage()
    {
        Logger.LogInformation(
            "Templated Message {Guid}",
            Guid.NewGuid().ToString()
        );
    }
}