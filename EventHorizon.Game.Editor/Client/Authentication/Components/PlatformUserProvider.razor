@using MediatR
@using EventHorizon.Game.Client.Core.I18n.Api
@using EventHorizon.Game.Editor.Client.Authentication.Model
@using Microsoft.Extensions.Configuration
@using System.IdentityModel.Tokens.Jwt
@using EventHorizon.Platform.LogProvider.Api

@if (IsValid)
{
    <CascadingValue Value="PlatformUser">
        @ChildContent
    </CascadingValue>
}
else
{
    @if (PlatformUser.IsAuthenticated)
    {

        <div class="platform-user-provider">
            <h1 class="header">
                @Localizer["You do not have Access to this Editor"]
            </h1>
            <DisplayLoginStatus />
        </div>
    }
    else
    {
        <AuthorizeView>
            <Authorizing>
                <div class="platform-user-provider">
                    <h1>@Localizer["Authorizing..."]</h1>
                </div>
            </Authorizing>
            <NotAuthorized>
                <div class="platform-user-provider">
                    <h1>@Localizer["Login to Access the Editor"]</h1>
                    <DisplayLoginStatus />
                </div>
            </NotAuthorized>
        </AuthorizeView>
    }
}

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; } = null!;

    [Inject]
    public AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;
    [Inject]
    public IAccessTokenProvider TokenProvider { get; set; } = null!;
    [Inject]
    public IMediator Mediator { get; set; } = null!;
    [Inject]
    public IConfiguration Configuration { get; set; } = null!;
    [Inject]
    public ILocalizer Localizer { get; set; } = null!;
    [Inject]
    public ClientDetailsEnrichmentService ClientEnrichmentService { get; set; } = null!;

    public bool IsValid { get; private set; }
    public PlatformUserModel PlatformUser { get; private set; } = new PlatformUserModel();

    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += HandleAuthStateChanged;
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        PlatformUser.IsAuthenticated = state.User?.Identity?.IsAuthenticated ?? false;

        if (PlatformUser.IsAuthenticated)
        {
            await SetupAuthenticatedPlatformUser();
        }
    }

    public void HandleAuthStateChanged(
        Task<AuthenticationState> _
    )
    {
        InvokeAsync(
            async () =>
            {
                var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                PlatformUser.IsAuthenticated = state.User?.Identity?.IsAuthenticated ?? false;

                if (PlatformUser.IsAuthenticated)
                {
                    await SetupAuthenticatedPlatformUser();
                }
            }
        );
    }

    private async Task SetupAuthenticatedPlatformUser()
    {
        var userId = Configuration["DeploymentDetails:UserId"] ?? string.Empty;
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var accessTokenResult = await TokenProvider.RequestAccessToken();
        PlatformUser.IsAuthenticated = state.User?.Identity?.IsAuthenticated ?? false;
        if (!accessTokenResult.TryGetToken(out var token))
        {
            return;
        }

        var jwtToken = new JwtSecurityToken(token.Value);
        PlatformUser.IsAdmin = jwtToken.Claims.Any(
            a => a.Type == "role" && a.Value == "Admin"
        );
        IsValid = PlatformUser.IsAdmin || (state.User?.HasClaim(
            "sub",
            userId
        ) ?? false);

        if (IsValid)
        {
            var authenticatedUserId = state.User?.Claims.FirstOrDefault(
                a => a.Type == "sub"
            )?.Value ?? "anonymous";

            ClientEnrichmentService.EnrichWith(
                "Client.AuthenticatedUserId",
                authenticatedUserId
            );

            ClientEnrichmentService.EnrichWith(
                "Client.DeploymentDetails.UserId",
                userId
            );
        }
    }
}
