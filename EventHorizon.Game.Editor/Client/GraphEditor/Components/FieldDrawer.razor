@using System.Reflection
@using EventHorizon.Game.Editor.Client.GraphEditor.Models

<div>
    @if (Attribute.IsDefined(Property, typeof(CustomPropertyDrawer)))
    {
        var attribute = (CustomPropertyDrawer)Property.GetCustomAttributes(typeof(CustomPropertyDrawer)).First();
        var drawer = attribute.ComponentType;
        @if (typeof(BasePropertyDrawer).IsAssignableFrom(drawer))
        {
            @RenderWidget(drawer)
        }
    }
    else if (Property.PropertyType == typeof(int))
    {
        <FluentNumberField class="graph-node-field" Label="@Property.Name" @bind-Value="Integer" />
    }
    else if (Property.PropertyType == typeof(long))
    {
        <FluentNumberField class="graph-node-field" Label="@Property.Name" @bind-Value="Long" />
    }
    else if (Property.PropertyType == typeof(float))
    {
        <FluentNumberField class="graph-node-field" Label="@Property.Name" @bind-Value="Float" />
    }
    else if (Property.PropertyType == typeof(double))
    {
        <FluentNumberField class="graph-node-field" Label="@Property.Name" @bind-Value="Double" />
    }
    else if (Property.PropertyType == typeof(bool))
    {
        <FluentCheckbox class="graph-node-field" Label="@Property.Name" @bind-Value="Boolean" />
    }
    else if (Property.PropertyType == typeof(string))
    {
        <FluentTextField class="graph-node-field" Label="@Property.Name" @bind-Value="@Text" />

    }
    else if (Property.PropertyType.IsEnum)
    {
        <select class="graph-node-field" @bind="Enumeration">
            @foreach (var value in Enum.GetValues(Property.PropertyType))
            {
                <option value="@((int)value)">@value</option>
            }
        </select>
    }
</div>
